#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define TRUE 1 
#define FALSE 0 

struct SG
{
    struct SG* left;
    int value;
    struct SG* right;
};

int max(int a,int b)
{
    if(a>=b)
    return a;
    else
    return b;
}

int size(struct SG*t)
{
    if(t==NULL)
    return 0;
    else 
    return (1+size(t->left)+size(t->right));
}

int height(struct SG*t)
{
    if(t==NULL)
    return 0;
    else 
    return max(size(t->left),size(t->right))+1;
}

void insert(struct SG**t,int num)
{
    double s;
    int h;
    if(*t==NULL)
    { 
        *t= (struct SG*)malloc(sizeof (struct SG));
        (*t)->left  = NULL;
        (*t)->value=num;
        (*t)->right = NULL;
    }    
    else{
        if(num<(*t)->value)
        insert(&((*t)->left),num);
        else
        insert(&((*t)->right),num);
    }
    s=(log(size(t)))/(log(ph));
    h=height(t);
    if(h>s)
}

int search (struct SG*t,int num)
{
    while(t!=NULL)
    {
        if(num==t->value)
        return 1;
        else if (num<t->value)
        t=t->left;
        else
        t=t->right;
    }
    return 0;
}

void locate ( struct SG **root, int num, struct SG **par,struct SG**x,int*found)
{
    struct SG*q;
    q = *root; 
    *found = FALSE; 
    *par = NULL;

    while ( q != NULL)
    {
        if ( q->value == num)
        {
            *found = TRUE; 
            *x = q;
            return; 
            
        }
        *par =q;
        if (q->value > num)
        q = q->left;
        else
        q = q->right;
    }
}

void del ( struct SG **root, int num) 
{
    int found;
    struct SG *parent, *x, *xsucc;
    if ( *root == NULL)
    { 
        printf ("Tree is empty\n"); 
        return; 
        
    }
    parent = x = NULL;
    locate ( root, num, &parent, &x, &found );
    if ( found == FALSE)
    { 
        printf ("\nNode to be deleted not found\n");
        return; 
        
    }
    if ( x->left != NULL && x->right != NULL)
    {

        parent = x; 
        xsucc = x->right ;

        while ( xsucc->left != NULL) 
        { 
            parent = xsucc;
            xsucc = xsucc->left;
        }

        x->value = xsucc->value ; 
        x = xsucc;
    }
    if ( x->left == NULL && x->right == NULL)
    {
        if ( parent->right == x) 
        parent->right = NULL; 
        else 
        parent->left = NULL;
        free (x); 
        return;
    }

    if ( x->left == NULL && x->right != NULL)
    {
        if ( parent->left == x) 
        parent->left = x->right; 
        else 
        parent->right = x->right;
        free ( x);
        return;
    }

    if ( x->left != NULL && x->right == NULL)
    {
        if ( parent->left == x) 
        parent->left = x->left; 
        else 
        parent->right = x->left;
        free (x); 
        return;
    }
}

int main()
{
    struct SG* bt;
    int d;
    char ch;
    while(1)
    {   
        printf("i) Insert :\ns) search :\np) delete:\nq) Quit:\nEnter char:");
        scanf("%c",&ch);
        switch(ch)
        {
            case 'i':
            printf("Enter a data to insert:");
            scanf("%d",&d);
            insert(&bt,d);
            break;
            case 's':
            printf("Enter data you want to search:");
            scanf("%d",&d);
            search(bt,d);
            break;
            case 'd':
            printf("Enter data you want to delete:");
            scanf("%d",&d);
            del(&bt,d);
            break;
            case'q':
            exit(0);
        }
    }
}
